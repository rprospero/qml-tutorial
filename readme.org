* QML Tutorial

This repo is a tutorial set for understanding using QML with Python
for creating GUIs.  Python was chosen due to its status as a modern
/lingua franca/ of coding, but the concepts apply to [[https://wiki.qt.io/Language_Bindings][dozens of
languages]].  In fact, the QML files allows changing the backend
implementation language without making any changes to the interface.

Through a series of alternating sections, we'll create a small data
analysis application.  We will attempt to alternate making changes to
the python and the QML to help emphasise the separation.

** Hello World

[[file:hello][This]] folder contains a minimal example of QML code.  Any QML code that
does not require work from the Python backend can be loaded from this
Python example.

- [[file:hello/view.qml][view.qml]] :: A QML file displaying a simple greeting
- [[file:hello/main.py][main.py]] :: The python script to display a QML file

Run the example

#+BEGIN_SRC shell
python3 main.py
#+END_SRC

*** Exercises

- Change the background to a less garish colour.
- Give a more personal greeting.

** Compute Stats

[[file:stts][This folder]] starts the journey of interacting between QML and Python.
The module will load a file of X and Y values and display the means of
the columns.

*** New files

- [[file:stats/model.py][model.py]] :: A class for providing statistics to QML.

*** Exercises

- Create new properties to display the sums of the columns

** Display Stats

[[file:display][This folder]] provides a better display for the statistics that we
calculated in the last chapter.  We also introduce the two different
types of layout in QML: managed and anchored

*** Exercises

- Put the X and Y means on the same row
- Move the title to the bottom of the window
- Move the title to the left side of the window
- Remove the =GridLayout= and layout the entire window with anchors
  (this will be tedious).

** Adjustable file name

[[file:filename][This folder]] modifies the =Stats= class to allow the file name to be
chosen by the QML file.  This introduces both setters for properties
and the concept of a =Signal=.  Thus far, our getters have always been
calculations on the data.  We want the calculation to be performed
again when the data is updated, but we don't want to waste resources
by continuously performing the same calculation repeatedly.  This
dilemma is solved by attaching a notification signal to the property.
The QML only calls into python to update the data when it receives the
appropriate signal.  In turn, we can emit this signal at any point in
our python code where we feel this update is needed.

*** Exercises
- Set title text to the name of the data file
